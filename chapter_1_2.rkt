#lang racket

#| Exercise 1.9.  Each of the following two procedures defines a method for adding two positive 
integers in terms of the procedures inc, which increments its argument by 1, and dec, which 
decrements its argument by 1.

Using the substitution model, illustrate the process generated by each procedure in evaluating 
(+ 4 5). Are these processes iterative or recursive?
--
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
recursive

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
iterative
|#

#| Exercise 1.10.  The following procedure computes a mathematical function called Ackermann's 
function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

What are the values of the following expressions?

(A 1 10)
1024

(A 2 4)
65536

(A 3 3)
65536

Consider the following procedures, where A is the procedure defined above:

(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for 
positive integer values of n. For example, (k n) computes 5n2. 

(f n) computes 2n
(g n) computes 2^n
(h n) computes ????
|#

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10)
(A 2 4)
(A 3 3)

#| Exercise 1.11.  A function f is defined by the rule that 

f(n) = n if n<3 and 
f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n> 3. 

Write a procedure that computes f by means of a recursive process. Write a procedure that 
computes f by means of an iterative process. |#

(define (f-rec n)
  (if (< n 3)
      n
      (+ (f-rec (- n 1)) (* 2 (f-rec (- n 2))) (* 3 (f-rec (- n 3))))))

(f-rec 10)

(define (f-iter n)
  (define (iter n1 n2 n3 count)
    (if (= count n)
        n1
        (iter (+ n1 (* 2 n2) (* 3 n3)) n1 n2 (+ count 1))))
  (if (< n 3)
      n
      (iter 2 1 0 2)))

(f-iter 10)

#| Exercise 1.12.  The following pattern of numbers is called Pascal's triangle.

The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of
the two numbers above it.35 Write a procedure that computes elements of Pascal's triangle by means 
of a recursive process. |#

(define (pascal row n)
  (cond ((or (< n 1) (> n row)) 0)
        ((= row 1) 1)
        (else (+ (pascal (- row 1) (- n 1)) (pascal (- row 1) n)))))

(pascal 5 3)
(pascal 6 3)
    
    
